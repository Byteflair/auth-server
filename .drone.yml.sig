eyJhbGciOiJIUzI1NiJ9.d29ya3NwYWNlOgogIGJhc2U6IC9kcm9uZQogIHBhdGg6IHNyYwpwaXBlbGluZToKICAjUmVzdGF1cmFtb3MgbGEgY2FjaGUKICBzZnRwX2NhY2hlX3Jlc3RvcmU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICBzZXJ2ZXI6IGRldi5ieXRlZmxhaXIuY29tOjIyCiAgICBwYXRoOiAvaG9tZS9kZXBsb3ltZW50L2NhY2hlL3JlcG9zaXRvcnkvCiAgICByZXN0b3JlOiB0cnVlCiAgICBtb3VudDogL2Ryb25lLy5tMi8KICAgIHdoZW46CiAgICAgIG1hdHJpeDoKICAgICAgICBESVJFQ1RPUlk6IG9hdXRoMi1zZXJ2ZXItcG9zdGdyZXNxbAogICAgICAgIERBVEFCQVNFOiBwb3N0Z3Jlc3FsCiAgICAgIG1hdHJpeDoKICAgICAgICBESVJFQ1RPUlk6IG9hdXRoMi1zZXJ2ZXItbXlzcWwKICAgICAgICBEQVRBQkFTRTogbXlzcWwKICBidWlsZDoKICAgIGltYWdlOiBtYXZlbjozLWpkay04CiAgICBjb21tYW5kczoKICAgICNDb3BpYXIgc2V0dGluZ3MgZGUgbWF2ZW4KICAgICAtIGlmIFsgLWQgIi9kcm9uZS8ubTIiIF07IHRoZW4KICAgICAgICAgICBjcCAtYSAvZHJvbmUvLm0yIC9yb290IDsKICAgICAgIGZpCiAgICAjQ29waWFyIHNldHRpbmdzIGRlIG1hdmVuCiAgICAgLSBjcCAvZHJvbmUvc3JjLy5kcm9uZS9zZXR0aW5ncy54bWwgL3Jvb3QvLm0yCiAgICAjTGltcGlhciB5IGNvbXBpbGFyCiAgICAgLSBtdm4gLUIgLURpbnQuc2tpcD10cnVlIC1EZG9ja2VyLnNraXA9dHJ1ZSAtRHNwcmluZy5wcm9maWxlcy5hY3RpdmU9ZGV2IGNsZWFuIGluc3RhbGwKICAgICAtIG12biAtQiBzb25hcjpzb25hcgogICAgd2hlbjoKICAgICAgbWF0cml4OgogICAgICAgIERJUkVDVE9SWTogb2F1dGgyLXNlcnZlci1wb3N0Z3Jlc3FsCiAgICAgICAgREFUQUJBU0U6IHBvc3RncmVzcWwKICAgICAgbWF0cml4OgogICAgICAgIERJUkVDVE9SWTogb2F1dGgyLXNlcnZlci1teXNxbAogICAgICAgIERBVEFCQVNFOiBteXNxbAogIGlfdGVzdF9wb3N0Z3Jlc3FsOgogICAgaW1hZ2U6IG1hdmVuOjMtamRrLTgKICAgIGNvbW1hbmRzOgogICAgI0VqZWN1dGFyIHRlc3RzIGRlIGludGVncmFjacOzbgogICAgIC0gY2QgLyR7RElSRUNUT1JZfSAmJiBtdm4gLUIgLURqYXZhLnNlY3VyaXR5LmVnZD1maWxlOi9kZXYvLi91cmFuZG9tIC1EdW5pdC5za2lwPXRydWUgLURzcHJpbmcucHJvZmlsZXMuYWN0aXZlPWRldiB2ZXJpZnkgJiYgY2QgLi4KICAgICAtIGNwIC1hIC9yb290Ly5tMiAvZHJvbmUKICAgIHdoZW46CiAgICAgIG1hdHJpeDoKICAgICAgICBESVJFQ1RPUlk6IG9hdXRoMi1zZXJ2ZXItcG9zdGdyZXNxbAogICAgICAgIERBVEFCQVNFOiBwb3N0Z3Jlc3FsCiAgICAgIG1hdHJpeDoKICAgICAgICBESVJFQ1RPUlk6IG9hdXRoMi1zZXJ2ZXItbXlzcWwKICAgICAgICBEQVRBQkFTRTogbXlzcWwKICBkZXBsb3k6CiAgICBpbWFnZTogbWF2ZW46My1qZGstOAogICAgY29tbWFuZHM6CiAgICAgI0NvcGlhciBzZXR0aW5ncyBkZSBtYXZlbgogICAgIC0gaWYgWyAtZCAiL2Ryb25lLy5tMiIgXTsgdGhlbgogICAgICAgICAgIGNwIC1hIC9kcm9uZS8ubTIgL3Jvb3QgOwogICAgICAgZmkKICAgICAjQ29waWFyIHNldHRpbmdzIGRlIG1hdmVuCiAgICAgLSBjcCAvZHJvbmUvc3JjLy5kcm9uZS9zZXR0aW5ncy54bWwgL3Jvb3QvLm0yCiAgICAgLSBtdm4gLUIgLUR1bml0LnNraXA9dHJ1ZSAtRGludC5za2lwPXRydWUgLURtYXZlbi5pbnN0YWxsLnNraXA9dHJ1ZSBkZXBsb3kgLUQgamFyTmFtZT0KICAgIHdoZW46CiAgICAgIGJyYW5jaDogW2RldiwgcmVsZWFzZS8qLCBtYXN0ZXJdCiAgICAgIG1hdHJpeDoKICAgICAgICBESVJFQ1RPUlk6IG9hdXRoMi1zZXJ2ZXItcG9zdGdyZXNxbAogICAgICAgIERBVEFCQVNFOiBwb3N0Z3Jlc3FsCiAgICAgIG1hdHJpeDoKICAgICAgICBESVJFQ1RPUlk6IG9hdXRoMi1zZXJ2ZXItbXlzcWwKICAgICAgICBEQVRBQkFTRTogbXlzcWwKICBzZnRwX2NhY2hlX3NhdmU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICBzZXJ2ZXI6IGRldi5ieXRlZmxhaXIuY29tOjIyCiAgICBwYXRoOiAvaG9tZS9kZXBsb3ltZW50L2NhY2hlL3JlcG9zaXRvcnkvCiAgICByZWJ1aWxkOiB0cnVlCiAgICBtb3VudDogL2Ryb25lLy5tMi8KICAgIHdoZW46CiAgICAgIHN0YXR1czogIFsgZmFpbHVyZSwgc3VjY2VzcyBdCiAgICAgIG1hdHJpeDoKICAgICAgICBESVJFQ1RPUlk6IG9hdXRoMi1zZXJ2ZXItcG9zdGdyZXNxbAogICAgICAgIERBVEFCQVNFOiBwb3N0Z3Jlc3FsCiAgICAgIG1hdHJpeDoKICAgICAgICBESVJFQ1RPUlk6IG9hdXRoMi1zZXJ2ZXItbXlzcWwKICAgICAgICBEQVRBQkFTRTogbXlzcWwKc2VydmljZXM6CiAgcG9zdGdyZXNxbDoKICAgIGltYWdlOiBwb3N0Z3Jlczo5LjUKICAgIGVudmlyb25tZW50OgogICAgIC0gUE9TVEdSRVNfVVNFUj1vYXV0aF9zZXJ2ZXIKICAgICAtIFBPU1RHUkVTX1BBU1NXT1JEPXBhc3N3b3JkCiAgICAgLSBQT1NUR1JFU19EQj1vYXV0aF9kYgogICAgcG9ydHM6CiAgICAgICI1NDMyOjU0MzIiCiAgbXlzcWw6CiAgICBpbWFnZTogbXlzcWw6NS41CiAgICBlbnZpcm9ubWVudDoKICAgICAtIE1ZU1FMX1VTRVI9b2F1dGhfc2VydmVyCiAgICAgLSBNWVNRTF9ST09UX1BBU1NXT1JEPXBhc3N3b3JkCiAgICAgLSBNWVNRTF9QQVNTV09SRD1wYXNzd29yZAogICAgIC0gTVlTUUxfREFUQUJBU0U9b2F1dGhfZGIKICAgIHBvcnRzOgogICAgICAiMzMwNjozMzA2IgptYXRyaXg6CiAgRElSRUNUT1JZOgogICAgLSBvYXV0aDItc2VydmVyLXBvc3RncmVzcWwKICAgIC0gb2F1dGgyLXNlcnZlci1teXNxbAogIERBVEFCQVNFOgogICAgLSBteXNxbAogICAgLSBwb3N0Z3Jlc3Fs.jgt5-kp1HHYY6O3O1J_A59YNC7pf61plVY0xqVl7Sfs