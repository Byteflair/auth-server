eyJhbGciOiJIUzI1NiJ9.d29ya3NwYWNlOgogIGJhc2U6IC9kcm9uZQogIHBhdGg6IHNyYwpwaXBlbGluZToKICAjUmVzdGF1cmFtb3MgbGEgY2FjaGUKICBzZnRwX2NhY2hlX3Jlc3RvcmU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICBzZXJ2ZXI6IGRldi5ieXRlZmxhaXIuY29tOjIyCiAgICBwYXRoOiAvaG9tZS9kZXBsb3ltZW50L2NhY2hlL3JlcG9zaXRvcnkvCiAgICByZXN0b3JlOiB0cnVlCiAgICBtb3VudDogL2Ryb25lLy5tMi8KICAgIHdoZW46CiAgICAgIG1hdHJpeDoKICAgICAgICBESVJFQ1RPUlk6IG9hdXRoMi1zZXJ2ZXItcG9zdGdyZXNxbAogICAgICAgIERBVEFCQVNFOiBwb3N0Z3Jlc3FsCiAgICAgIG1hdHJpeDoKICAgICAgICBESVJFQ1RPUlk6IG9hdXRoMi1zZXJ2ZXItbXlzcWwKICAgICAgICBEQVRBQkFTRTogbXlzcWwKICBidWlsZDoKICAgIGltYWdlOiBtYXZlbjozLWpkay04CiAgICBjb21tYW5kczoKICAgICNDb3BpYXIgc2V0dGluZ3MgZGUgbWF2ZW4KICAgICAtIGlmIFsgLWQgIi9kcm9uZS8ubTIiIF07IHRoZW4KICAgICAgICAgICBjcCAtYSAvZHJvbmUvLm0yIC9yb290IDsKICAgICAgIGZpCiAgICAjQ29waWFyIHNldHRpbmdzIGRlIG1hdmVuCiAgICAgLSBjcCAvZHJvbmUvc3JjLy5kcm9uZS9zZXR0aW5ncy54bWwgL3Jvb3QvLm0yCiAgICAjTGltcGlhciB5IGNvbXBpbGFyCiAgICAgLSBtdm4gLUIgLURpbnQuc2tpcD10cnVlIC1EZG9ja2VyLnNraXA9dHJ1ZSAtRHNwcmluZy5wcm9maWxlcy5hY3RpdmU9ZGV2IGNsZWFuIGluc3RhbGwKICAgICAtIG12biAtQiBzb25hcjpzb25hcgogICAgIHdoZW46CiAgICAgICBtYXRyaXg6CiAgICAgICAgIERJUkVDVE9SWTogb2F1dGgyLXNlcnZlci1wb3N0Z3Jlc3FsCiAgICAgICAgIERBVEFCQVNFOiBwb3N0Z3Jlc3FsCiAgICAgICBtYXRyaXg6CiAgICAgICAgIERJUkVDVE9SWTogb2F1dGgyLXNlcnZlci1teXNxbAogICAgICAgICBEQVRBQkFTRTogbXlzcWwKICBpX3Rlc3RfcG9zdGdyZXNxbDoKICAgIGltYWdlOiBtYXZlbjozLWpkay04CiAgICBjb21tYW5kczoKICAgICNFamVjdXRhciB0ZXN0cyBkZSBpbnRlZ3JhY2nDs24KICAgICAtIGNkIC8ke0RJUkVDVE9SWX0gJiYgbXZuIC1CIC1EamF2YS5zZWN1cml0eS5lZ2Q9ZmlsZTovZGV2Ly4vdXJhbmRvbSAtRHVuaXQuc2tpcD10cnVlIC1Ec3ByaW5nLnByb2ZpbGVzLmFjdGl2ZT1kZXYgdmVyaWZ5ICYmIGNkIC4uCiAgICAgLSBjcCAtYSAvcm9vdC8ubTIgL2Ryb25lCiAgICB3aGVuOgogICAgICBtYXRyaXg6CiAgICAgICAgRElSRUNUT1JZOiBvYXV0aDItc2VydmVyLXBvc3RncmVzcWwKICAgICAgICBEQVRBQkFTRTogcG9zdGdyZXNxbAogICAgICBtYXRyaXg6CiAgICAgICAgRElSRUNUT1JZOiBvYXV0aDItc2VydmVyLW15c3FsCiAgICAgICAgREFUQUJBU0U6IG15c3FsCiAgZGVwbG95OgogICAgaW1hZ2U6IG1hdmVuOjMtamRrLTgKICAgIGNvbW1hbmRzOgogICAgICNDb3BpYXIgc2V0dGluZ3MgZGUgbWF2ZW4KICAgICAtIGlmIFsgLWQgIi9kcm9uZS8ubTIiIF07IHRoZW4KICAgICAgICAgICBjcCAtYSAvZHJvbmUvLm0yIC9yb290IDsKICAgICAgIGZpCiAgICAgI0NvcGlhciBzZXR0aW5ncyBkZSBtYXZlbgogICAgIC0gY3AgL2Ryb25lL3NyYy8uZHJvbmUvc2V0dGluZ3MueG1sIC9yb290Ly5tMgogICAgIC0gbXZuIC1CIC1EdW5pdC5za2lwPXRydWUgLURpbnQuc2tpcD10cnVlIC1EbWF2ZW4uaW5zdGFsbC5za2lwPXRydWUgZGVwbG95IC1EIGphck5hbWU9CiAgICB3aGVuOgogICAgICBicmFuY2g6IFtkZXYsIHJlbGVhc2UvKiwgbWFzdGVyXQogICAgICBtYXRyaXg6CiAgICAgICAgRElSRUNUT1JZOiBvYXV0aDItc2VydmVyLXBvc3RncmVzcWwKICAgICAgICBEQVRBQkFTRTogcG9zdGdyZXNxbAogICAgICBtYXRyaXg6CiAgICAgICAgRElSRUNUT1JZOiBvYXV0aDItc2VydmVyLW15c3FsCiAgICAgICAgREFUQUJBU0U6IG15c3FsCiAgc2Z0cF9jYWNoZV9zYXZlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZQogICAgc2VydmVyOiBkZXYuYnl0ZWZsYWlyLmNvbToyMgogICAgcGF0aDogL2hvbWUvZGVwbG95bWVudC9jYWNoZS9yZXBvc2l0b3J5LwogICAgcmVidWlsZDogdHJ1ZQogICAgbW91bnQ6IC9kcm9uZS8ubTIvCiAgICB3aGVuOgogICAgICBzdGF0dXM6ICBbIGZhaWx1cmUsIHN1Y2Nlc3MgXQogICAgICBtYXRyaXg6CiAgICAgICAgRElSRUNUT1JZOiBvYXV0aDItc2VydmVyLXBvc3RncmVzcWwKICAgICAgICBEQVRBQkFTRTogcG9zdGdyZXNxbAogICAgICBtYXRyaXg6CiAgICAgICAgRElSRUNUT1JZOiBvYXV0aDItc2VydmVyLW15c3FsCiAgICAgICAgREFUQUJBU0U6IG15c3FsCnNlcnZpY2VzOgogIHBvc3RncmVzcWw6CiAgICBpbWFnZTogcG9zdGdyZXM6OS41CiAgICBlbnZpcm9ubWVudDoKICAgICAtIFBPU1RHUkVTX1VTRVI9b2F1dGhfc2VydmVyCiAgICAgLSBQT1NUR1JFU19QQVNTV09SRD1wYXNzd29yZAogICAgIC0gUE9TVEdSRVNfREI9b2F1dGhfZGIKICAgIHBvcnRzOgogICAgICAiNTQzMjo1NDMyIgogIG15c3FsOgogICAgaW1hZ2U6IG15c3FsOjUuNQogICAgZW52aXJvbm1lbnQ6CiAgICAgLSBNWVNRTF9VU0VSPW9hdXRoX3NlcnZlcgogICAgIC0gTVlTUUxfUk9PVF9QQVNTV09SRD1wYXNzd29yZAogICAgIC0gTVlTUUxfUEFTU1dPUkQ9cGFzc3dvcmQKICAgICAtIE1ZU1FMX0RBVEFCQVNFPW9hdXRoX2RiCiAgICBwb3J0czoKICAgICAgIjMzMDY6MzMwNiIKbWF0cml4OgogIERJUkVDVE9SWToKICAgIC0gb2F1dGgyLXNlcnZlci1wb3N0Z3Jlc3FsCiAgICAtIG9hdXRoMi1zZXJ2ZXItbXlzcWwKICBEQVRBQkFTRToKICAgIC0gbXlzcWwKICAgIC0gcG9zdGdyZXNxbA.K6zXWW0vL29VxhKeQ3a12FhLfCplDUZbWxlm6rvI2dE