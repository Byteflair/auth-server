eyJhbGciOiJIUzI1NiJ9.d29ya3NwYWNlOgogIGJhc2U6IC9kcm9uZQogIHBhdGg6IHNyYwpwaXBlbGluZToKICAjUmVzdGF1cmFtb3MgbGEgY2FjaGUKICBzZnRwX2NhY2hlX3Jlc3RvcmU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICBzZXJ2ZXI6IGRldi5ieXRlZmxhaXIuY29tOjIyCiAgICBwYXRoOiAvaG9tZS9kZXBsb3ltZW50L2NhY2hlL3JlcG9zaXRvcnkvCiAgICByZXN0b3JlOiB0cnVlCiAgICBtb3VudDogL2Ryb25lLy5tMi8KICBidWlsZDoKICAgIGltYWdlOiBtYXZlbjozLWpkay04CiAgICBjb21tYW5kczoKICAgICNDb3BpYXIgc2V0dGluZ3MgZGUgbWF2ZW4KICAgICAtIGlmIFsgLWQgIi9kcm9uZS8ubTIiIF07IHRoZW4KICAgICAgICAgICBjcCAtYSAvZHJvbmUvLm0yIC9yb290IDsKICAgICAgIGZpCiAgICAjQ29waWFyIHNldHRpbmdzIGRlIG1hdmVuCiAgICAgLSBjcCAvZHJvbmUvc3JjLy5kcm9uZS9zZXR0aW5ncy54bWwgL3Jvb3QvLm0yCiAgICAjTGltcGlhciB5IGNvbXBpbGFyCiAgICAgLSBtdm4gLUIgLURpbnQuc2tpcD10cnVlIC1EZG9ja2VyLnNraXA9dHJ1ZSAtRHNwcmluZy5wcm9maWxlcy5hY3RpdmU9ZGV2IGNsZWFuIGluc3RhbGwKICAgICAtIG12biAtQiBzb25hcjpzb25hcgogICAgIC0gY3AgLWEgL3Jvb3QvLm0yIC9kcm9uZQogIGlfdGVzdF9wb3N0Z3Jlc3FsOgogICAgaW1hZ2U6IG1hdmVuOjMtamRrLTgKICAgIGNvbW1hbmRzOgogICAgI0NvcGlhciBzZXR0aW5ncyBkZSBtYXZlbgogICAgIC0gaWYgWyAtZCAiL2Ryb25lLy5tMiIgXTsgdGhlbgogICAgICAgICAgIGNwIC1hIC9kcm9uZS8ubTIgL3Jvb3QgOwogICAgICAgZmkKICAgICNFamVjdXRhciB0ZXN0cyBkZSBpbnRlZ3JhY2nDs24KICAgICAtIGNkIG9hdXRoMi1zZXJ2ZXItcG9zdGdyZXNxbCAmJiBtdm4gLUIgLURqYXZhLnNlY3VyaXR5LmVnZD1maWxlOi9kZXYvLi91cmFuZG9tIC1EdW5pdC5za2lwPXRydWUgLURkb2NrZXIuc2tpcD10cnVlIC1Ec3ByaW5nLnByb2ZpbGVzLmFjdGl2ZT1kZXYgdmVyaWZ5ICYmIGNkIC4uCiAgICAgLSBjcCAtYSAvcm9vdC8ubTIgL2Ryb25lCiAgaV90ZXN0X215c3FsOgogICAgaW1hZ2U6IG1hdmVuOjMtamRrLTgKICAgIGNvbW1hbmRzOgogICAgI0NvcGlhciBzZXR0aW5ncyBkZSBtYXZlbgogICAgIC0gaWYgWyAtZCAiL2Ryb25lLy5tMiIgXTsgdGhlbgogICAgICAgICAgIGNwIC1hIC9kcm9uZS8ubTIgL3Jvb3QgOwogICAgICAgZmkKICAgICNFamVjdXRhciB0ZXN0cyBkZSBpbnRlZ3JhY2nDs24KICAgICAtIGNkIG9hdXRoMi1zZXJ2ZXItbXlzcWwgJiYgbXZuIC1CIC1EamF2YS5zZWN1cml0eS5lZ2Q9ZmlsZTovZGV2Ly4vdXJhbmRvbSAtRHVuaXQuc2tpcD10cnVlIC1EZG9ja2VyLnNraXA9dHJ1ZSAtRHNwcmluZy5wcm9maWxlcy5hY3RpdmU9ZGV2IHZlcmlmeSAmJiBjZCAuLgogICAgIC0gY3AgLWEgL3Jvb3QvLm0yIC9kcm9uZQogIGRlcGxveToKICAgIGltYWdlOiBtYXZlbjozLWpkay04CiAgICBjb21tYW5kczoKICAgICAjQ29waWFyIHNldHRpbmdzIGRlIG1hdmVuCiAgICAgLSBpZiBbIC1kICIvZHJvbmUvLm0yIiBdOyB0aGVuCiAgICAgICAgICAgY3AgLWEgL2Ryb25lLy5tMiAvcm9vdCA7CiAgICAgICBmaQogICAgICNDb3BpYXIgc2V0dGluZ3MgZGUgbWF2ZW4KICAgICAtIGNwIC9kcm9uZS9zcmMvLmRyb25lL3NldHRpbmdzLnhtbCAvcm9vdC8ubTIKICAgICAtIG12biAtQiAtRHVuaXQuc2tpcD10cnVlIC1EaW50LnNraXA9dHJ1ZSAtRG1hdmVuLmluc3RhbGwuc2tpcD10cnVlIGRlcGxveSAtRCBqYXJOYW1lPQogICAgd2hlbjoKICAgICAgYnJhbmNoOiBbZGV2LCByZWxlYXNlLyosIG1hc3Rlcl0KICBzZnRwX2NhY2hlX3NhdmU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICBzZXJ2ZXI6IGRldi5ieXRlZmxhaXIuY29tOjIyCiAgICBwYXRoOiAvaG9tZS9kZXBsb3ltZW50L2NhY2hlL3JlcG9zaXRvcnkvCiAgICByZWJ1aWxkOiB0cnVlCiAgICBtb3VudDogL2Ryb25lLy5tMi8KICAgIHdoZW46CiAgICAgIHN0YXR1czogIFsgZmFpbHVyZSwgc3VjY2VzcyBdCnNlcnZpY2VzOgogIHBvc3RncmVzcWw6CiAgICBpbWFnZTogcG9zdGdyZXM6OS41CiAgICBlbnZpcm9ubWVudDoKICAgICAtIFBPU1RHUkVTX1VTRVI9b2F1dGhfc2VydmVyCiAgICAgLSBQT1NUR1JFU19QQVNTV09SRD1wYXNzd29yZAogICAgIC0gUE9TVEdSRVNfREI9b2F1dGhfZGIKICAgIHBvcnRzOgogICAgICAiNTQzMjo1NDMyIgogIG15c3FsOgogICAgaW1hZ2U6IG15c3FsOjUuNQogICAgZW52aXJvbm1lbnQ6CiAgICAgLSBNWVNRTF9VU0VSPW9hdXRoX3NlcnZlcmMKICAgICAtIE1ZU1FMX1JPT1RfUEFTU1dPUkQ9cGFzc3dvcmQKICAgICAtIE1ZU1FMX1BBU1NXT1JEPXBhc3N3b3JkCiAgICAgLSBNWVNRTF9EQVRBQkFTRT1vYXV0aF9kYgogICAgcG9ydHM6CiAgICAgICIzMzA2OjMzMDYi.yXQzx1yuD8hUETPwyi7gBSXLNlrpubpI17KzkPp42PI